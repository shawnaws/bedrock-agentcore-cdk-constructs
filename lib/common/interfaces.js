"use strict";
/**
 * Common interfaces and types for reusable CDK constructs
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConstructError = void 0;
/**
 * Custom error class for construct-specific errors
 */
class ConstructError extends Error {
    constructor(
    /** Name of the construct that threw the error */
    constructName, 
    /** Type of error that occurred */
    errorType, 
    /** Error message */
    message, 
    /** Optional suggestions for resolving the error */
    suggestions) {
        super(`[${constructName}] ${message}`);
        this.constructName = constructName;
        this.errorType = errorType;
        this.suggestions = suggestions;
        this.name = 'ConstructError';
        // Maintain proper stack trace for where our error was thrown (only available on V8)
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, ConstructError);
        }
    }
}
exports.ConstructError = ConstructError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tb24vaW50ZXJmYWNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7OztBQXlHSDs7R0FFRztBQUNILE1BQWEsY0FBZSxTQUFRLEtBQUs7SUFDdkM7SUFDRSxpREFBaUQ7SUFDakMsYUFBcUI7SUFDckMsa0NBQWtDO0lBQ2xCLFNBQW9FO0lBQ3BGLG9CQUFvQjtJQUNwQixPQUFlO0lBQ2YsbURBQW1EO0lBQ25DLFdBQXNCO1FBRXRDLEtBQUssQ0FBQyxJQUFJLGFBQWEsS0FBSyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBUnZCLGtCQUFhLEdBQWIsYUFBYSxDQUFRO1FBRXJCLGNBQVMsR0FBVCxTQUFTLENBQTJEO1FBSXBFLGdCQUFXLEdBQVgsV0FBVyxDQUFXO1FBR3RDLElBQUksQ0FBQyxJQUFJLEdBQUcsZ0JBQWdCLENBQUM7UUFFN0Isb0ZBQW9GO1FBQ3BGLElBQUksS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDNUIsS0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsQ0FBQztRQUNoRCxDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBbkJELHdDQW1CQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29tbW9uIGludGVyZmFjZXMgYW5kIHR5cGVzIGZvciByZXVzYWJsZSBDREsgY29uc3RydWN0c1xuICovXG5cbmltcG9ydCB7IFJlbW92YWxQb2xpY3kgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5cbi8qKlxuICogQmFzZSBwcm9wZXJ0aWVzIHRoYXQgYWxsIGNvbnN0cnVjdHMgaW4gdGhpcyBsaWJyYXJ5IHNob3VsZCBzdXBwb3J0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUNvbnN0cnVjdFByb3BzIHtcbiAgLyoqXG4gICAqIEVudmlyb25tZW50LXNwZWNpZmljIGNvbmZpZ3VyYXRpb25cbiAgICogQWZmZWN0cyBkZWZhdWx0IHNldHRpbmdzIGZvciBzZWN1cml0eSwgbG9nZ2luZywgYW5kIHJlc291cmNlIGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIGVudmlyb25tZW50PzogJ2RldicgfCAnc3RhZ2luZycgfCAncHJvZCc7XG4gIFxuICAvKipcbiAgICogUmVzb3VyY2UgbmFtaW5nIGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIG5hbWluZz86IHtcbiAgICAvKiogUHJlZml4IHRvIGFkZCB0byBhbGwgcmVzb3VyY2UgbmFtZXMgKi9cbiAgICBwcmVmaXg/OiBzdHJpbmc7XG4gICAgLyoqIFN1ZmZpeCB0byBhZGQgdG8gYWxsIHJlc291cmNlIG5hbWVzICovXG4gICAgc3VmZml4Pzogc3RyaW5nO1xuICB9O1xuICBcbiAgLyoqXG4gICAqIENvbW1vbiB0YWdzIHRvIGFwcGx5IHRvIGFsbCByZXNvdXJjZXMgY3JlYXRlZCBieSB0aGlzIGNvbnN0cnVjdFxuICAgKi9cbiAgdGFncz86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG4gIFxuICAvKipcbiAgICogUmVtb3ZhbCBwb2xpY3kgZm9yIHJlc291cmNlcyBjcmVhdGVkIGJ5IHRoaXMgY29uc3RydWN0XG4gICAqIEBkZWZhdWx0IFJlbW92YWxQb2xpY3kuUkVUQUlOIGZvciBwcm9kdWN0aW9uLCBSZW1vdmFsUG9saWN5LkRFU1RST1kgZm9yIGRldi9zdGFnaW5nXG4gICAqL1xuICByZW1vdmFsUG9saWN5PzogUmVtb3ZhbFBvbGljeTtcbn1cblxuLyoqXG4gKiBTZWN1cml0eSBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIGNvbnN0cnVjdHNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZWN1cml0eUNvbmZpZyB7XG4gIC8qKiBFbmFibGUgZW5jcnlwdGlvbiBhdCByZXN0IGZvciBzdXBwb3J0ZWQgcmVzb3VyY2VzICovXG4gIGVuY3J5cHRpb25BdFJlc3Q/OiBib29sZWFuO1xuICBcbiAgLyoqIEVuYWJsZSBlbmNyeXB0aW9uIGluIHRyYW5zaXQgZm9yIHN1cHBvcnRlZCByZXNvdXJjZXMgKi9cbiAgZW5jcnlwdGlvbkluVHJhbnNpdD86IGJvb2xlYW47XG4gIFxuICAvKiogRW5hYmxlIGFjY2VzcyBsb2dnaW5nIGZvciBzdXBwb3J0ZWQgcmVzb3VyY2VzICovXG4gIGVuYWJsZUFjY2Vzc0xvZ2dpbmc/OiBib29sZWFuO1xuICBcbiAgLyoqIFJlc3RyaWN0IHB1YmxpYyBhY2Nlc3Mgd2hlcmUgYXBwbGljYWJsZSAqL1xuICByZXN0cmljdFB1YmxpY0FjY2Vzcz86IGJvb2xlYW47XG4gIFxuICAvKiogRW5hYmxlIFZQQyBlbmRwb2ludHMgZm9yIHN1cHBvcnRlZCBzZXJ2aWNlcyAqL1xuICBlbmFibGVWcGNFbmRwb2ludHM/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIE1vbml0b3JpbmcgYW5kIG9ic2VydmFiaWxpdHkgY29uZmlndXJhdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1vbml0b3JpbmdDb25maWcge1xuICAvKiogRW5hYmxlIENsb3VkV2F0Y2ggbG9nZ2luZyAqL1xuICBlbmFibGVMb2dnaW5nPzogYm9vbGVhbjtcbiAgXG4gIC8qKiBDbG91ZFdhdGNoIGxvZyByZXRlbnRpb24gcGVyaW9kIGluIGRheXMgKi9cbiAgbG9nUmV0ZW50aW9uRGF5cz86IG51bWJlcjtcbiAgXG4gIC8qKiBFbmFibGUgWC1SYXkgdHJhY2luZyAqL1xuICBlbmFibGVUcmFjaW5nPzogYm9vbGVhbjtcbiAgXG4gIC8qKiBFbmFibGUgQ2xvdWRXYXRjaCBtZXRyaWNzICovXG4gIGVuYWJsZU1ldHJpY3M/OiBib29sZWFuO1xuICBcbiAgLyoqIEVuYWJsZSBDbG91ZFdhdGNoIGFsYXJtcyBmb3IgY3JpdGljYWwgbWV0cmljcyAqL1xuICBlbmFibGVBbGFybXM/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIFJlc3VsdCBvZiBjb25maWd1cmF0aW9uIHZhbGlkYXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0aW9uUmVzdWx0IHtcbiAgLyoqIFdoZXRoZXIgdGhlIGNvbmZpZ3VyYXRpb24gaXMgdmFsaWQgKi9cbiAgaXNWYWxpZDogYm9vbGVhbjtcbiAgXG4gIC8qKiBMaXN0IG9mIHZhbGlkYXRpb24gZXJyb3JzICovXG4gIGVycm9yczogc3RyaW5nW107XG4gIFxuICAvKiogTGlzdCBvZiB2YWxpZGF0aW9uIHdhcm5pbmdzICovXG4gIHdhcm5pbmdzOiBzdHJpbmdbXTtcbiAgXG4gIC8qKiBTdWdnZXN0aW9ucyBmb3IgZml4aW5nIHZhbGlkYXRpb24gaXNzdWVzICovXG4gIHN1Z2dlc3Rpb25zPzogc3RyaW5nW107XG59XG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciBjb25maWd1cmF0aW9uIHZhbGlkYXRvcnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb25maWdWYWxpZGF0b3I8VD4ge1xuICAvKipcbiAgICogVmFsaWRhdGUgYSBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgKiBAcGFyYW0gY29uZmlnIFRoZSBjb25maWd1cmF0aW9uIHRvIHZhbGlkYXRlXG4gICAqIEByZXR1cm5zIFZhbGlkYXRpb24gcmVzdWx0IHdpdGggZXJyb3JzIGFuZCB3YXJuaW5nc1xuICAgKi9cbiAgdmFsaWRhdGUoY29uZmlnOiBUKTogVmFsaWRhdGlvblJlc3VsdDtcbn1cblxuLyoqXG4gKiBDdXN0b20gZXJyb3IgY2xhc3MgZm9yIGNvbnN0cnVjdC1zcGVjaWZpYyBlcnJvcnNcbiAqL1xuZXhwb3J0IGNsYXNzIENvbnN0cnVjdEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihcbiAgICAvKiogTmFtZSBvZiB0aGUgY29uc3RydWN0IHRoYXQgdGhyZXcgdGhlIGVycm9yICovXG4gICAgcHVibGljIHJlYWRvbmx5IGNvbnN0cnVjdE5hbWU6IHN0cmluZyxcbiAgICAvKiogVHlwZSBvZiBlcnJvciB0aGF0IG9jY3VycmVkICovXG4gICAgcHVibGljIHJlYWRvbmx5IGVycm9yVHlwZTogJ1ZBTElEQVRJT04nIHwgJ0NPTkZJR1VSQVRJT04nIHwgJ1JVTlRJTUUnIHwgJ0RFUEVOREVOQ1knLFxuICAgIC8qKiBFcnJvciBtZXNzYWdlICovXG4gICAgbWVzc2FnZTogc3RyaW5nLFxuICAgIC8qKiBPcHRpb25hbCBzdWdnZXN0aW9ucyBmb3IgcmVzb2x2aW5nIHRoZSBlcnJvciAqL1xuICAgIHB1YmxpYyByZWFkb25seSBzdWdnZXN0aW9ucz86IHN0cmluZ1tdXG4gICkge1xuICAgIHN1cGVyKGBbJHtjb25zdHJ1Y3ROYW1lfV0gJHttZXNzYWdlfWApO1xuICAgIHRoaXMubmFtZSA9ICdDb25zdHJ1Y3RFcnJvcic7XG4gICAgXG4gICAgLy8gTWFpbnRhaW4gcHJvcGVyIHN0YWNrIHRyYWNlIGZvciB3aGVyZSBvdXIgZXJyb3Igd2FzIHRocm93biAob25seSBhdmFpbGFibGUgb24gVjgpXG4gICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBDb25zdHJ1Y3RFcnJvcik7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogTWV0YWRhdGEgYWJvdXQgYSBjb25zdHJ1Y3QgaW1wbGVtZW50YXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb25zdHJ1Y3RNZXRhZGF0YSB7XG4gIC8qKiBDb25zdHJ1Y3QgbmFtZSAqL1xuICBuYW1lOiBzdHJpbmc7XG4gIFxuICAvKiogQ29uc3RydWN0IHZlcnNpb24gKi9cbiAgdmVyc2lvbjogc3RyaW5nO1xuICBcbiAgLyoqIEJyaWVmIGRlc2NyaXB0aW9uIG9mIHdoYXQgdGhlIGNvbnN0cnVjdCBkb2VzICovXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIFxuICAvKiogQ2F0ZWdvcnkgb2YgdGhlIGNvbnN0cnVjdCAqL1xuICBjYXRlZ29yeTogJ2JlZHJvY2stYWdlbnRjb3JlJyB8ICdzdG9yYWdlJyB8ICdjb21wdXRlJyB8ICduZXR3b3JraW5nJyB8ICdwYXR0ZXJucyc7XG4gIFxuICAvKiogQ0RLIGNvbnN0cnVjdCBsZXZlbCAoTDEsIEwyLCBvciBMMykgKi9cbiAgbGV2ZWw6ICdMMScgfCAnTDInIHwgJ0wzJztcbiAgXG4gIC8qKiBMaXN0IG9mIEFXUyBzZXJ2aWNlcyB1c2VkIGJ5IHRoaXMgY29uc3RydWN0ICovXG4gIGF3c1NlcnZpY2VzOiBzdHJpbmdbXTtcbiAgXG4gIC8qKiBMaW5rcyB0byB1c2FnZSBleGFtcGxlcyAqL1xuICBleGFtcGxlcz86IHN0cmluZ1tdO1xuICBcbiAgLyoqIEtub3duIGxpbWl0YXRpb25zIG9yIGNvbnNpZGVyYXRpb25zICovXG4gIGxpbWl0YXRpb25zPzogc3RyaW5nW107XG59XG5cbi8qKlxuICogRW52aXJvbm1lbnQtc3BlY2lmaWMgZGVmYXVsdCBjb25maWd1cmF0aW9uc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEVudmlyb25tZW50RGVmYXVsdHMge1xuICAvKiogRW52aXJvbm1lbnQgbmFtZSAqL1xuICBuYW1lOiAnZGV2JyB8ICdzdGFnaW5nJyB8ICdwcm9kJztcbiAgXG4gIC8qKiBEZWZhdWx0IHJlbW92YWwgcG9saWN5IGZvciB0aGlzIGVudmlyb25tZW50ICovXG4gIHJlbW92YWxQb2xpY3k6IFJlbW92YWxQb2xpY3k7XG4gIFxuICAvKiogRGVmYXVsdCBzZWN1cml0eSBzZXR0aW5ncyAqL1xuICBzZWN1cml0eTogU2VjdXJpdHlDb25maWc7XG4gIFxuICAvKiogRGVmYXVsdCBtb25pdG9yaW5nIHNldHRpbmdzICovXG4gIG1vbml0b3Jpbmc6IE1vbml0b3JpbmdDb25maWc7XG4gIFxuICAvKiogV2hldGhlciB0byBvcHRpbWl6ZSBmb3IgY29zdCBvdmVyIHBlcmZvcm1hbmNlICovXG4gIGNvc3RPcHRpbWl6ZWQ6IGJvb2xlYW47XG59XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBmb3IgQVdTIHJlc291cmNlIHRhZ2dpbmdcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUYWdnaW5nQ29uZmlnIHtcbiAgLyoqIFN0YW5kYXJkIHRhZ3MgdG8gYXBwbHkgdG8gYWxsIHJlc291cmNlcyAqL1xuICBzdGFuZGFyZFRhZ3M6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG4gIFxuICAvKiogRW52aXJvbm1lbnQtc3BlY2lmaWMgdGFncyAqL1xuICBlbnZpcm9ubWVudFRhZ3M/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuICBcbiAgLyoqIENvc3QgYWxsb2NhdGlvbiB0YWdzICovXG4gIGNvc3RBbGxvY2F0aW9uVGFncz86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG4gIFxuICAvKiogQ29tcGxpYW5jZSB0YWdzICovXG4gIGNvbXBsaWFuY2VUYWdzPzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcbn0iXX0=